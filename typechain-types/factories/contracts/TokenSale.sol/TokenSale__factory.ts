/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenSale,
  TokenSaleInterface,
} from "../../../contracts/TokenSale.sol/TokenSale";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_ratio",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_paymentToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burnNft",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "buyNft",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "buyTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "nftContract",
    outputs: [
      {
        internalType: "contract IMyERC721Token",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerPool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymentToken",
    outputs: [
      {
        internalType: "contract IMyERC20Token",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ratio",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200124838038062001248833981810160405281019062000037919062000262565b620000576200004b620000f160201b60201c565b620000f960201b60201c565b836001819055508260028190555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002d4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001d781620001c2565b8114620001e357600080fd5b50565b600081519050620001f781620001cc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022a82620001fd565b9050919050565b6200023c816200021d565b81146200024857600080fd5b50565b6000815190506200025c8162000231565b92915050565b600080600080608085870312156200027f576200027e620001bd565b5b60006200028f87828801620001e6565b9450506020620002a287828801620001e6565b9350506040620002b5878288016200024b565b9250506060620002c8878288016200024b565b91505092959194509250565b610f6480620002e46000396000f3fe6080604052600436106100c25760003560e01c8063715018a61161007f578063a035b1fe11610059578063a035b1fe1461022e578063d0febe4c14610259578063d56d229d14610263578063f2fde38b1461028e576100c2565b8063715018a6146101c157806371ca337d146101d85780638da5cb5b14610203576100c2565b8063243adbdd146100c75780632b65e040146100f05780632e1a7d4d1461011b5780633013ce29146101445780633d5efefe1461016f5780636d1b229d14610198575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190610a5f565b6102b7565b005b3480156100fc57600080fd5b50610105610414565b6040516101129190610a9b565b60405180910390f35b34801561012757600080fd5b50610142600480360381019061013d9190610a5f565b61041a565b005b34801561015057600080fd5b506101596104ee565b6040516101669190610b35565b60405180910390f35b34801561017b57600080fd5b5061019660048036038101906101919190610a5f565b610514565b005b3480156101a457600080fd5b506101bf60048036038101906101ba9190610a5f565b610652565b005b3480156101cd57600080fd5b506101d661073e565b005b3480156101e457600080fd5b506101ed610752565b6040516101fa9190610a9b565b60405180910390f35b34801561020f57600080fd5b50610218610758565b6040516102259190610b71565b60405180910390f35b34801561023a57600080fd5b50610243610781565b6040516102509190610a9b565b60405180910390f35b610261610787565b005b34801561026f57600080fd5b50610278610831565b6040516102859190610bad565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190610bf4565b610857565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33306002546040518463ffffffff1660e01b815260040161031893929190610c21565b6020604051808303816000875af1158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b9190610c90565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a144819433836040518363ffffffff1660e01b81526004016103b9929190610cbd565b600060405180830381600087803b1580156103d357600080fd5b505af11580156103e7573d6000803e3d6000fd5b50505050600280546103f99190610d44565b6005600082825461040a9190610d75565b9250508190555050565b60055481565b6104226108da565b60055481111561043157600080fd5b80600560008282546104439190610da9565b92505081905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104a7929190610cbd565b6020604051808303816000875af11580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190610c90565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68826040518263ffffffff1660e01b815260040161056f9190610a9b565b600060405180830381600087803b15801561058957600080fd5b505af115801561059d573d6000803e3d6000fd5b50505050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600280546105ee9190610d44565b6040518363ffffffff1660e01b815260040161060b929190610cbd565b6020604051808303816000875af115801561062a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064e9190610c90565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b81526004016106af929190610cbd565b600060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b505050506000600154826106f19190610ddd565b90503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610739573d6000803e3d6000fd5b505050565b6107466108da565b6107506000610958565b565b60015481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b600034905060006001548261079c9190610d44565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016107fb929190610cbd565b600060405180830381600087803b15801561081557600080fd5b505af1158015610829573d6000803e3d6000fd5b505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61085f6108da565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c590610ea2565b60405180910390fd5b6108d781610958565b50565b6108e2610a1c565b73ffffffffffffffffffffffffffffffffffffffff16610900610758565b73ffffffffffffffffffffffffffffffffffffffff1614610956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094d90610f0e565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b6000819050919050565b610a3c81610a29565b8114610a4757600080fd5b50565b600081359050610a5981610a33565b92915050565b600060208284031215610a7557610a74610a24565b5b6000610a8384828501610a4a565b91505092915050565b610a9581610a29565b82525050565b6000602082019050610ab06000830184610a8c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610afb610af6610af184610ab6565b610ad6565b610ab6565b9050919050565b6000610b0d82610ae0565b9050919050565b6000610b1f82610b02565b9050919050565b610b2f81610b14565b82525050565b6000602082019050610b4a6000830184610b26565b92915050565b6000610b5b82610ab6565b9050919050565b610b6b81610b50565b82525050565b6000602082019050610b866000830184610b62565b92915050565b6000610b9782610b02565b9050919050565b610ba781610b8c565b82525050565b6000602082019050610bc26000830184610b9e565b92915050565b610bd181610b50565b8114610bdc57600080fd5b50565b600081359050610bee81610bc8565b92915050565b600060208284031215610c0a57610c09610a24565b5b6000610c1884828501610bdf565b91505092915050565b6000606082019050610c366000830186610b62565b610c436020830185610b62565b610c506040830184610a8c565b949350505050565b60008115159050919050565b610c6d81610c58565b8114610c7857600080fd5b50565b600081519050610c8a81610c64565b92915050565b600060208284031215610ca657610ca5610a24565b5b6000610cb484828501610c7b565b91505092915050565b6000604082019050610cd26000830185610b62565b610cdf6020830184610a8c565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d4f82610a29565b9150610d5a83610a29565b925082610d6a57610d69610ce6565b5b828204905092915050565b6000610d8082610a29565b9150610d8b83610a29565b9250828201905080821115610da357610da2610d15565b5b92915050565b6000610db482610a29565b9150610dbf83610a29565b9250828203905081811115610dd757610dd6610d15565b5b92915050565b6000610de882610a29565b9150610df383610a29565b9250828202610e0181610a29565b91508282048414831517610e1857610e17610d15565b5b5092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e8c602683610e1f565b9150610e9782610e30565b604082019050919050565b60006020820190508181036000830152610ebb81610e7f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ef8602083610e1f565b9150610f0382610ec2565b602082019050919050565b60006020820190508181036000830152610f2781610eeb565b905091905056fea264697066735822122011247d206111a1aab9bc9988c091a79b0a756f75b1221fedc926ee2e3201419164736f6c63430008110033";

type TokenSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSale__factory extends ContractFactory {
  constructor(...args: TokenSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ratio: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenSale> {
    return super.deploy(
      _ratio,
      _price,
      _paymentToken,
      _nftContract,
      overrides || {}
    ) as Promise<TokenSale>;
  }
  override getDeployTransaction(
    _ratio: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _paymentToken: PromiseOrValue<string>,
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ratio,
      _price,
      _paymentToken,
      _nftContract,
      overrides || {}
    );
  }
  override attach(address: string): TokenSale {
    return super.attach(address) as TokenSale;
  }
  override connect(signer: Signer): TokenSale__factory {
    return super.connect(signer) as TokenSale__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSaleInterface {
    return new utils.Interface(_abi) as TokenSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSale {
    return new Contract(address, _abi, signerOrProvider) as TokenSale;
  }
}
